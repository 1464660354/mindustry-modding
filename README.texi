\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename README.info
@settitle 
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@finalout
@titlepage
@title 
@author Simon
@end titlepage

@contents

@ifnottex
@node Top
@top 

@emph{Disclaimer: This is a work in progress, things may not work as expected.}

@end ifnottex

@menu
* Overview::
* Type::
* Block Types::
* BulletTypes::
* UnitTypes::
* Mech::
* Weapon::
* Effect::
* StatusEffect::
* Zone::
* Rules::
* Objective::

@detailmenu
--- The Detailed Node Listing ---

Overview

* @samp{mod.json}: @samp{modjson}. 
* Content::
* Sprites::
* Sound::
* ::

Type

* UnlockableContent and MappableContent::
* ItemStack::
* LiquidStack::
* Consumers::
* Attributes::
* Attribute::
* Item::
* Liquid::
* BlockStorage::
* BuildVisibility::
* Layer::
* BlockGroup::
* Category::
* Color::
* TargetPriority::

Consumers

* Consume::
* ConsumeItems::
* ConsumeLiquidBase::
* ConsumeLiquid::
* ConsumePower::

Block Types

* Block::
* Environment::
* Crafting::
* Sandbox::
* Defense::
* Turrets::
* Distribution::
* Liquid: Liquid 1. 
* Power::
* Production::
* Storage::
* Units::

Environment

* Floor::
* OverlayFloor::
* DoubleOverlayFloor::
* OreBlock::
* StaticWalls::
* TreeBlock::

Crafting

* GenericCrafter::
* GenericSmelter::
* Separator::

Sandbox

* Incinerator::
* PowerVoid::
* PowerSource::
* ItemSource::
* ItemVoid::
* LiquidSource::
* MessageBlock::

Defense

* Wall::
* DeflectorWall::
* SurgeWall::
* Door::
* MendProjector::
* OverdriveProjector::
* ForceProjector::
* ShockMine::

Turrets

* Turret::
* CooledTurret::
* ItemTurret::
* DoubleTurret::
* ArtilleryTurret::
* BurstTurret::
* PowerTurret::
* ChargeTurret::
* LaserTurret::
* LiquidTurret::

Distribution

* Conveyor::
* ArmoredConveyor::
* Junction::
* ItemBridge::
* ExtendingItemBridge::
* BufferedItemBridge::
* Sorter::
* OverflowGate::
* MassDriver::

Liquid

* LiquidBlock::
* Pump::
* Conduit::
* LiquidRouter::
* LiquidTank::
* LiquidJunction::
* LiquidBridge::
* LiquidExtendingBridge::

Power

* PowerBlock::
* PowerNode::
* PowerDistributor::
* Battery::
* PowerGenerator::
* ThermalGenerator::
* ItemLiquidGenerator::
* SingleTypeGenerator::
* BurnerGenerator::
* DecayGenerator::
* SolarGenerator::
* NuclearReactor::
* ImpactReactor::

Production

* Drill::
* SolidPump::
* Cultivator::
* Fracker::

Storage

* CoreBlock::
* Vault::
* Unloader::
* LaunchPad::

Units

* RepairPoint::
* UnitFactory::
* CommandCenter::
* UnitFactory: UnitFactory 1. 
* MechPad::

BulletTypes

* BulletType::
* BasicBulletType::
* ArtilleryBulletType::
* BombBulletType::
* FlakBulletType::
* HealBulletType::
* LiquidBulletType::
* MassDriverBolt::
* MissileBulletType::

UnitTypes

* UnitType::
* BaseUnit::

@end detailmenu
@end menu

@node Overview
@chapter Overview

@menu
* @samp{mod.json}: @samp{modjson}. 
* Content::
* Sprites::
* Sound::
* ::
@end menu

@node @samp{modjson}
@section @samp{mod.json}

At the root of your project directory, you must have a `mod.json` which defines the basic metadata for your project.

@example
@{
    "name": "Mod Name",
    "author": "Yourself",
    "description": "This is a useless description.",
    "version": "1.0",
    "dependencies": [ ]
@}
@end example

Notes:
@itemize
@item
@samp{name} will be used to reference to your mod, so name it carefully, and avoid giving it the same name as another mod.
@item
@samp{description} of the mod will be rendered in the mod manager.
@item
@samp{dependencies} is optional, if you want to know more about that, go to the @ref{, , dependencies} section.
@end itemize

@node Content
@section Content

At the root of your project directory you can have a @samp{content/} directory, this is where all the JSON data goes for your content types, and in this directory you have subdirectories for the various types of units, these are the current common ones:

@itemize
@item
@code{content/items/} for things like copper and surge-alloy,
@item
@code{content/blocks/} for things like turrets and floors,
@item
@code{content/mechs/} for player controlled mechs tau and dagger,
@item
@code{content/liquids/} for liquids like water and slag,
@item
@code{content/units/} for flying or ground units like reaper and dagger,
@item
@code{content/zones/} for configuration of campaign maps.
@end itemize

This is important, because it's how Mindustry will know which types to lookup. -- How you name your files is also important as the stem @samp{name} of your path @samp{content/blocks/<name>.json} is going to be used to reference it.

@node Sprites
@section Sprites

Custom sprites can be added by simply dropping them in the @samp{sprites/} subdirectory, and be @samp{.png} file, and content which requires a sprite is going to fetch the sprite relative to the filename of the sprite: @samp{sprites/<name>.png}, for example @samp{sprites/my-hail.png} would be used on @samp{content/blocks/my-hail.json}.

On top of this, content type may even look for two or more sprites, either through numbering or/and suffixes: @samp{sprites/<name>-<i>.png} for example @samp{sprites/my-hail-heat.png} for the @samp{heat} map used when the turret is shooting, coloring parts of the turret red for a moment.

Note that you may put your files in any sub-directory of @samp{sprites/}:
@itemize
@item
@samp{sounds/egg/teleporter/train/wall.png}
@end itemize

@node Sound
@section Sound

Custom sounds can be added through the modding system in the `sounds/` directory, of which two formats are needed:

@itemize
@item
@samp{.ogg} required for Desktop/Android
@item
@samp{.mp3} required for iOS
@end itemize

Note that you may put your files in any sub-directory of @samp{sounds/}:
@itemize
@item
@samp{sounds/egg/teleporter/train/wall.ogg}
@end itemize

Just like any other assets, you reference them by the stem of your filename(s).

Here's a list of built-in sounds:
@itemize
@item
@samp{artillery}
@item
@samp{back}
@item
@samp{bang}
@item
@samp{beam}
@item
@samp{bigshot}
@item
@samp{boom}
@item
@samp{break}
@item
@samp{build}
@item
@samp{buttonClick}
@item
@samp{click}
@item
@samp{conveyor}
@item
@samp{corexplode}
@item
@samp{door}
@item
@samp{drill}
@item
@samp{empty}
@item
@samp{explosionbig}
@item
@samp{explosion}
@item
@samp{fire}
@item
@samp{flame2}
@item
@samp{flame}
@item
@samp{laserbig}
@item
@samp{laser}
@item
@samp{machine}
@item
@samp{message}
@item
@samp{missile}
@item
@samp{pew}
@item
@samp{place}
@item
@samp{press}
@item
@samp{release}
@item
@samp{respawning}
@item
@samp{respawn}
@item
@samp{shootBig}
@item
@samp{shoot}
@item
@samp{shootSnap}
@item
@samp{shotgun}
@item
@samp{spark}
@item
@samp{splash}
@item
@samp{spray}
@item
@samp{thruster}
@item
@samp{unlock}
@item
@samp{wave}
@item
@samp{windowHide}
@end itemize

@node 
@section 

You can add dependencies to your mod, by simple adding other mods name in your @code{mod.json}:

@example
@{
    "dependencies": [
        "other-mod-name",
        "not-a-mod"
    ]
@}
@end example

The other mods name needs to be lower cased and spaces replaced with hyphens (@samp{-}), for example @samp{Other MOD NamE} -> @samp{other-mod-name}.

To reference the other mods assets, you must prefix the asset with the other mods name:

@itemize
@item
@code{other-mod-name-not-copper} would reference @code{not-copper} in @code{other-mod-name}
@item
@code{other-mod-name-angry-dagger} would reference @code{angry-dagger} in @code{other-mod-name}
@item
@code{not-a-mod-angry-dagger} would reference @code{angry-dagger} in @code{not-a-mod}
@end itemize

@node Type
@chapter Type

Types have numerous fields, but the important one is @samp{type}. Types @emph{extend} each other, and what that means is if @samp{MissileBulletType} extends @samp{BasicBulletType}, then you'll have all the fields of @samp{BasicBulletType} inside of @samp{MissileBulletType} like @samp{damage}.

is what you'd expect is at the type's discretion, some fields aren't actually really used by their extenders/childrens, resulting in no behavior at all.

A type can be specified in the field of an object, but this is not all a type is. A type is the type of something @code{float} is a type so @code{0.3} is type float. @code{Block} is a type, which isn't something you'll be using by itself, but instead you use @code{Floor} which is a @code{Block} type topped with behavior that is floor specific.

@example
@{
    "type": "Revenant",
        "weapon": @{
            "bullet": @{
                "type": "MissileBulletType",
            "damage": 9000
        @}
    @}
@}
@end example

Here you can see, the type of the top level object is @code{Revenant}, but the type of the @code{bullet} which needs to be a @code{BulletType} is actually @code{MissileBulletType}, which gives you the behaviors and effects that missiles should have.

@menu
* UnlockableContent and MappableContent::
* ItemStack::
* LiquidStack::
* Consumers::
* Attributes::
* Attribute::
* Item::
* Liquid::
* BlockStorage::
* BuildVisibility::
* Layer::
* BlockGroup::
* Category::
* Color::
* TargetPriority::
@end menu

@node UnlockableContent and MappableContent
@section UnlockableContent and MappableContent

Types that can have a display name and description. @emph{Most content in other words} but not everything. @ref{ItemStack} isn't @code{UnlockableContent} because it's not content, it's just a stack of items.

@multitable {aaaaaaaaaaa} {aaaaaa}
@headitem field
@tab type
@item name
@tab String
@item description
@tab String
@end multitable

@example
@{
    "type": "Revenant",
    "name": "Mammoth",
    "description": "Not a description."
@}
@end example

@node ItemStack
@section ItemStack

This type is used by blocks, to consume/output items.

An item stack is simply an array of objects with these fields:

@multitable {aaaaaa} {aaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item amount
@tab int
@tab 1
@item item
@tab @ref{Item}
@tab 
@end multitable

For example:

@example
[
    @{ "amount": 30, "item": "surge-alloy" @},
    @{ "amount": 90, "item": "copper" @}
]
@end example

@node LiquidStack
@section LiquidStack

This type is used by blocks, to consume a liquid, just like @ref{ItemStack} except that it can only contain 1 liquid.

@multitable {aaaaaa} {aaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@item liquid
@tab @ref{Liquid}
@item amount
@tab float
@end multitable

For example:

@example
@{
   "liquid": "water",
   "amount": 0.5
@}
@end example

@node Consumers
@section Consumers

This type is commonly used in block type with it's field `consumes`, it's a type that allows your block to consume something, and how this field works is up to the specific type extension you're using.

@multitable {aaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab notes
@item item
@tab String
@tab shorthand for @samp{items}
@item items
@tab ConsumeItems
@tab 
@item liquid
@tab ConsumeLiquid
@tab 
@item power
@tab float or ConsumePower
@tab 
@item powerBuffered
@tab float
@tab for batteries
@end multitable

Notes:
@itemize
@item
you shouldn't have @samp{power} and @samp{powerBuffered}
@end itemize

For example with @ref{ConsumeItems}:
@example
@{
    "items": @{
        "items": [ @{ "amount": 10, "item": "copper" @} ],
        "booster": true,
        "optional": true
    @}
@}
@end example

@menu
* Consume::
* ConsumeItems::
* ConsumeLiquidBase::
* ConsumeLiquid::
* ConsumePower::
@end menu

@node Consume
@subsection Consume

An abstract base that defines a type of resource that a block can consume.

@multitable {aaaaaaaa} {aaaaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item optional
@tab boolean
@tab 
@tab consumer will not influence consumer validity.
@item booster
@tab boolean
@tab 
@tab consumer will be displayed as a boost input.
@item update
@tab boolean
@tab true
@tab 
@end multitable

@node ConsumeItems
@subsection ConsumeItems

Extends @ref{Consume} -- To consume an itemstack.

@multitable {aaaaa} {aaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@item items
@tab @ref{ItemStack}
@end multitable

@node ConsumeLiquidBase
@subsection ConsumeLiquidBase

Extends @ref{Consume}

@multitable {aaaaaaaaaa} {aaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item float
@tab final
@tab 
@tab amount used per frame
@item timePeriod
@tab float
@tab 60
@tab how much time is taken to use this liquid
@end multitable

Notes:
@itemize
@item
@samp{timePeriod} example: a normal ConsumeLiquid with 10/s and a 10 second timePeriod would display as "100 seconds", but without a time override it would display as "10 liquid/second". This is used for generic crafters.
@end itemize

@node ConsumeLiquid
@subsection ConsumeLiquid

Extends @ref{ConsumeLiquidBase} -- To consume a liquid type.


@multitable {aaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item liquid
@tab @ref{Liquid}
@tab null
@item amount
@tab float
@tab 0
@end multitable

@node ConsumePower
@subsection ConsumePower

Extends @ref{Consume} -- To consume or buffer power.

@multitable {aaaaaaaa} {aaaaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item usage
@tab float
@tab 
@tab The maximum amount of power which can be processed per tick.
@item capacity
@tab float
@tab 
@tab The maximum power capacity in power units.
@item buffered
@tab boolean
@tab 
@tab True if the module can store power.
@end multitable

Notes:
@itemize
@item
@samp{usage} might influence efficiency or load a buffer.
@end itemize

@node Attributes
@section Attributes

An object with an array of @ref{Attribute, , attribute}. Used in the @code{Floor} type to give a tile specific properties, like @emph{hottness} or @emph{sporness} for efficiency of various systems, like ThermalPumps and WaterExtractors.

@samp{array} has 4 items:

@itemize
@item
index @code{0} is @code{heat},
@item
index @code{1} is @code{spores},
@item
index @code{2} is @code{water},
@item
index @code{3} is @code{oil}.

For example, this would give you @code{100} heat, @code{1} spores, @code{0.5} water and @code{0.1} oil.

@example
@{
    "array": [ 100, 1, 0.5, 0.1]
@}
@end example

You could use it inside of @ref{Floor} type as such:

@example
@{
    "type": "Floor",
    "name": "magma",
    "attributes": @{ "array": [ 0.75, 0, 0, 0 ] @}
@}
@end example
@end itemize

@node Attribute
@section Attribute

New attributes cannot be added. List of built-in attributes:

@itemize
@item
@samp{heat}
@item
@samp{spores}
@item
@samp{water}
@item
@samp{oil}
@end itemize

@node Item
@section Item

Extends @ref{UnlockableContent and MappableContent, , UnlockableContent} -- It's the object that can ride conveyors, sorters and be stored in containers, and is commonly used in crafters.

@multitable {aaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item color
@tab @ref{Color}
@tab 
@tab hex string of color
@item type
@tab @ref{Item, , ItemType}
@tab 
@tab resource or material; used for tabs and core acceptance
@item explosiveness
@tab float
@tab @samp{0}
@tab how explosive this item is.
@item flammability
@tab float
@tab @samp{0}
@tab flammability above 0.3 makes this eleigible for item burners.
@item radioactivity
@tab float
@tab 
@tab how radioactive this item is. 0=none, 1=chernobyl ground zero
@item hardness
@tab int
@tab @code{0}
@tab drill hardness of the item
@item cost
@tab float
@tab @code{1}
@tab used for calculating place times; 1 cost = 1 tick added to build time
@item alwaysUnlocked
@tab boolean
@tab @samp{false}
@tab If true, item is always unlocked.
@end multitable

@node Liquid
@section Liquid

Extends @ref{UnlockableContent and MappableContent, , UnlockableContent} -- Object that defines the properties of a liquid.

@multitable {aaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item color
@tab @ref{Color}
@tab 
@tab color of liquid
@item flammability
@tab float
@tab 
@tab 0 to 1; 0 is completely inflammable, above that may catch fire when exposed to heat.
@item temperature
@tab float
@tab 0.5
@tab 0.5 is 'room' temperature, 0 is very cold, 1 is molten hot
@item heatCapacity
@tab float
@tab 0.5
@tab used in cooling; water is 0.4
@item viscosity
@tab float
@tab 0.5
@tab how thick this liquid is; water is 0.5, tar is 1.
@item explosiveness
@tab float
@tab 
@tab explosiveness when heated; 0 is nothing, 1 is nuke
@item flameColor
@tab @ref{Color}
@tab ffb763
@tab the burning color of this liquid
@item effect
@tab @ref{StatusEffect}
@tab none
@tab the associated status effect.
@end multitable

@node BlockStorage
@section BlockStorage

Extends @ref{UnlockableContent and MappableContent, , UnlockableContent} -- This is for blocks that can store a buffer of items.

@multitable {aaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa} {aaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item hasItems
@tab boolean
@tab 
@tab 
@item hasLiquids
@tab boolean
@tab 
@tab 
@item hasPower
@tab boolean
@tab 
@tab 
@item outputsLiquid
@tab boolean
@tab false
@tab 
@item consumesPower
@tab boolean
@tab true
@tab 
@item outputsPower
@tab bolean
@tab false
@tab 
@item itemCapacity
@tab int
@tab 10
@tab 
@item item
@tab float
@tab 10
@tab 
@item consumes
@tab @ref{Consumers}
@tab 
@tab 
@end multitable

@node BuildVisibility
@section BuildVisibility

Options for build visibility include:
@itemize
@item
@code{hidden}
@item
@code{shown}
@item
@code{debugOnly}
@item
@code{sandboxOnly}
@item
@code{campaignOnly}
@end itemize

@node Layer
@section Layer

Layers is an enumeration type, which the renderer will use to group rendering order:

@itemize
@item
@samp{block}, base block layer;
@item
@samp{placement}, for placement;
@item
@samp{overlay}, first overlay stuff like conveyor items;
@item
@samp{turret}, "high" blocks like turrets;
@item
@samp{power} power lasers
@end itemize

@node BlockGroup
@section BlockGroup

Groups for blocks to build on top of each other:
@itemize
@item
@code{none}
@item
@code{walls}
@item
@code{turrets}
@item
@code{transportation}
@item
@code{power}
@item
@code{liquids}
@item
@code{drills}
@end itemize

@node Category
@section Category

Categories for building menu:
@itemize
@item
@code{turret} Offensive turrets;
@item
@code{production} Blocks that produce raw resources, such as drills;
@item
@code{distribution} Blocks that move items around;
@item
@code{liquid} Blocks that move liquids around;
@item
@code{power} Blocks that generate or transport power;
@item
@code{defense} Walls and other defensive structures;
@item
@code{crafting} Blocks that craft things;
@item
@code{units} Blocks that create units;
@item
@code{upgrade} Things that upgrade the player such as mech pads;
@item
@code{effect} Things for storage or passive effects.
@end itemize

@node Color
@section Color

Color is a hexadecimal string, @samp{<rr><gg><bb>} for example:

@itemize
@item
@samp{ff0000} is read,
@item
@samp{00ff00} is green,
@item
@samp{00ffff} is blue,
@item
@samp{ffff00} is yellow,
@item
@samp{00ffff} is cyan,
@item
@emph{ect..}
@end itemize

@node TargetPriority
@section @strong{TODO} TargetPriority

@itemize
@item
@samp{base}
@item
@samp{turret}
@end itemize

@node Block Types
@chapter Block Types

@menu
* Block::
* Environment::
* Crafting::
* Sandbox::
* Defense::
* Turrets::
* Distribution::
* Liquid: Liquid 1. 
* Power::
* Production::
* Storage::
* Units::
@end menu

@node Block
@section Block

Extends @ref{BlockStorage} -- Fields for all objects that are blocks.

@multitable {aaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item update
@tab boolean
@tab 
@tab whether this block has a tile entity that updates
@item destructible
@tab boolean
@tab 
@tab whether this block has health and can be destroyed
@item unloadable
@tab boolean
@tab true
@tab whether unloaders work on this block
@item solid
@tab boolean
@tab 
@tab whether this is solid
@item solidifes
@tab boolean
@tab 
@tab whether this block CAN be solid.
@item rotate
@tab boolean
@tab 
@tab whether this is rotateable
@item breakable
@tab boolean
@tab 
@tab whether you can break this with rightclick
@item placeableOn
@tab boolean
@tab true
@tab whether this @ref{Floor, , floor} can be placed on.
@item health
@tab int
@tab -1
@tab tile entity health
@item baseExplosiveness
@tab float
@tab 0
@tab base block explosiveness
@item floating
@tab boolean
@tab false
@tab whether this block can be placed on edges of liquids.
@item size
@tab int
@tab 1
@tab multiblock size
@item expanded
@tab boolean
@tab false
@tab Whether to draw this block in the expanded draw range.
@item timers
@tab int
@tab 0
@tab Max of timers used.
@item fillesTile
@tab true
@tab 
@tab Special flag; if false, @ref{Floor, , floor} will be drawn under this block even if it is cached.
@item alwaysReplace
@tab boolean
@tab false
@tab whether this block can be replaced in all cases
@item group
@tab @ref{BlockGroup}
@tab none
@tab Unless @code{canReplace} is overriden, blocks in the same group can replace each other.
@item priority
@tab TargetPriority
@tab base
@tab Targeting priority of this block, as seen by enemies.
@item configurable
@tab boolean
@tab 
@tab Whether the block can be tapped and selected to configure.
@item consumesTap
@tab boolean
@tab 
@tab Whether this block consumes touchDown events when tapped.
@item posConfig
@tab boolean
@tab 
@tab Whether the config is positional and needs to be shifted.
@item targetable
@tab boolean
@tab true
@tab Whether units target this block.
@item canOverdrive
@tab boolean
@tab true
@tab Whether the overdrive core has any effect on this block.
@item outlineColor
@tab @ref{Color}
@tab 404049
@tab Outlined icon color.
@item outlineIcon
@tab boolean
@tab false
@tab Whether the icon region has an outline added.
@item hasShadow
@tab boolean
@tab true
@tab Whether this block has a shadow under it.
@item breakSound
@tab @ref{Sound}
@tab boom
@tab Sounds made when this block breaks.
@item activeSound
@tab @ref{Sound}
@tab none
@tab The sound that this block makes while active. One sound loop. Do not overuse.
@item activeSoundVolume
@tab float
@tab 0.5
@tab Active sound base volume.
@item idleSound
@tab @ref{Sound}
@tab none
@tab The sound that this block makes while idle. Uses one sound loop for all blocks.
@item idleSoundVolume
@tab float
@tab 0.5
@tab Idle sound base volume.
@item requirements
@tab @ref{ItemStack}
@tab 
@tab Cost of constructing and researching this block.
@item category
@tab @ref{Category}
@tab distribution
@tab Category in place menu.
@item buildCost
@tab float
@tab 
@tab Cost of building this block; do not modify directly!
@item buildVisibility
@tab @ref{BuildVisibility}
@tab hidden
@tab Whether this block is visible and can currently be built.
@item buildCostMultiplier
@tab float
@tab 1
@tab Multiplier for speed of building this block.
@item instantTransfer
@tab boolean
@tab false
@tab Whether this block has instant transfer.
@item alwaysUnlocked
@tab boolean
@tab false
@tab 
@item layer
@tab @ref{Layer}
@tab null
@tab Layer to draw extra stuff on.
@item layer2
@tab @ref{Layer}
@tab null
@tab Extra layer to draw extra stuff on.
@end multitable

Notes:
@itemize
@item
research cost is @samp{30 + <requirements> * 6}
@end itemize

@node Environment
@section Environment

@menu
* Floor::
* OverlayFloor::
* DoubleOverlayFloor::
* OreBlock::
* StaticWalls::
* TreeBlock::
@end menu

@node Floor
@subsection Floor

Extends @ref{Block} -- Environmental floors. Requires a sprite, so to be visible in the map editor.

@multitable {aaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item variants
@tab int
@tab 3
@tab number of different variant regions to use.
@item edge
@tab String
@tab "stone"
@tab edge fallback, used mainly for ores.
@item speedMultiplier
@tab float
@tab 1
@tab multiplies unit velocity by this when walked on.
@item dragMultiplier
@tab float
@tab 0
@tab multiplies unit drag by this when walked on.
@item damageTaken
@tab float
@tab 0
@tab damage taken per tick on this tile.
@item drownTime
@tab float
@tab 0
@tab how many ticks it takes to drown on this.
@item walkEffect
@tab @ref{Effect}
@tab "ripple"
@tab effect when walking on this @ref{Floor, , floor}.
@item drownUpdateEffect
@tab @ref{Effect}
@tab "bubble"
@tab effect displayed when drowning on this @ref{Floor, , floor}.
@item status
@tab StatusEffect
@tab "none"
@tab status effect applied when walking on.
@item statusDuration
@tab float
@tab 60
@tab intensity of applied status effect.
@item liquidDrop
@tab @ref{Liquid}
@tab 
@tab liquids that drop from this block, used for pumps.
@item itemDrop
@tab @ref{Item}
@tab 
@tab item that drops from this block, used for drills.
@item isLiquid
@tab boolean
@tab 
@tab whether this block can be drowned in.
@item playerUnmineable
@tab boolean
@tab false
@tab block cannot be mined by players if true.
@item blendGroup
@tab @ref{Block}
@tab this
@tab group of blocks that this block does not draw edges on.
@item updateEffect
@tab @ref{Effect}
@tab "none"
@tab effect displayed when randomly updated.
@item attributes
@tab @ref{Attributes}
@tab @code{@{ "array": [] @}}
@tab array of affinities to certain things.
@end multitable

Sprite lookup name, where @samp{i} is the variant:
@itemize
@item
@samp{<name><i>.png} variants start at @samp{1}.
@end itemize

@node OverlayFloor
@subsection OverlayFloor

Extends @ref{Floor} -- A type of floor that is overlaid on top of over floors.

For example:
@itemize
@item
@code{spawn}
@item
@code{tendrils}
@end itemize

@node DoubleOverlayFloor
@subsection DoubleOverlayFloor

Extends @ref{OverlayFloor}

For example:
@itemize
@item
@code{pebbles}
@end itemize

@node OreBlock
@subsection OreBlock

Extends @ref{OverlayFloor} -- An overlay ore for a specific item type.

@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item variants
@tab 3
@end multitable

@node StaticWalls
@subsection StaticWalls

@enumerate
@item
Rock


Extends @ref{Block} 

@multitable {aaaaaaaa} {aaaa}
@headitem field
@tab type
@item variants
@tab int
@end multitable

Defaults:
@multitable {aaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item breakable
@tab true
@item alwaysReplace
@tab true
@end multitable

@item
StaticWall


Extends @ref{Rock}

Defaults:
@multitable {aaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item breakable
@tab false
@item alwaysReplace
@tab false
@item solid
@tab true
@item variants
@tab 2
@end multitable

Extra Sprites:
@itemize
@item
@samp{<name>-large.png} which is a 2x2 variant.
@end itemize

@item
StaticTree


Extends @ref{StaticWall} 

For example:
@itemize
@item
@code{spore-pine}
@item
@code{snow-pine}
@item
@code{pine}
@item
@code{shrubs}
@end itemize
@end enumerate

@node TreeBlock
@subsection TreeBlock

Extends @ref{Block}

Defaults:
@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item solid
@tab true
@item layer
@tab power
@item expanded
@tab true
@end multitable

@node Crafting
@section Crafting

@menu
* GenericCrafter::
* GenericSmelter::
* Separator::
@end menu

@node GenericCrafter
@subsection GenericCrafter

Extends @ref{Block}

@multitable {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item outputItem
@tab @ref{ItemStack}
@tab 
@item outputLiquid
@tab @ref{LiquidStack}
@tab 
@item craftTime
@tab float
@tab 80
@item craftEffect
@tab @ref{Effect}
@tab none
@item updateEffect
@tab @ref{Effect}
@tab none
@item updateEffectChance
@tab float
@tab 0.04
@end multitable

Defaults:
@multitable {aaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item update
@tab true
@item solid
@tab true
@item hasItems
@tab true
@item health
@tab 60
@item idleSound
@tab machine
@item idleSoundVolume
@tab 0.03
@end multitable

@node GenericSmelter
@subsection GenericSmelter

Extends @ref{GenericCrafter} -- A GenericCrafter with a new glowing region drawn on top.

@multitable {aaaaaaaaaa} {aaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item flameColor
@tab @ref{Color}
@tab ffc999
@end multitable

Sprite suffix:
@itemize
@item
@samp{-top}
@end itemize

@node Separator
@subsection Separator

Extends @ref{Block} -- Extracts a random list of items from an input item and an input liquid.

@multitable {aaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa} {aaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item results
@tab @ref{ItemStack}
@tab 
@tab @strong{[required]}
@item craftTime
@tab float
@tab 
@tab 
@item spinnerRadius
@tab float
@tab 2.5
@tab 
@item spinnerLength
@tab float
@tab 1
@tab 
@item spinnerThickness
@tab float
@tab 1
@tab 
@item spinnerSpeed
@tab float
@tab 2
@tab 
@item color
@tab @ref{Color}
@tab 858585
@tab 
@item liquidRegion
@tab int
@tab 
@tab 
@end multitable

Defaults:
@multitable {aaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item update
@tab true
@item solid
@tab true
@item hasItems
@tab true
@item hasLiquids
@tab true
@end multitable

Sprite suffixes:
@itemize
@item
@samp{-liquid}
@end itemize

@node Sandbox
@section Sandbox

@menu
* Incinerator::
* PowerVoid::
* PowerSource::
* ItemSource::
* ItemVoid::
* LiquidSource::
* MessageBlock::
@end menu

@node Incinerator
@subsection @strong{TODO} Incinerator

@node PowerVoid
@subsection @strong{TODO} PowerVoid

@node PowerSource
@subsection @strong{TODO} PowerSource

@node ItemSource
@subsection @strong{TODO} ItemSource

@node ItemVoid
@subsection @strong{TODO} ItemVoid

@node LiquidSource
@subsection @strong{TODO} LiquidSource

@node MessageBlock
@subsection @strong{TODO} MessageBlock

@node Defense
@section Defense

@menu
* Wall::
* DeflectorWall::
* SurgeWall::
* Door::
* MendProjector::
* OverdriveProjector::
* ForceProjector::
* ShockMine::
@end menu

@node Wall
@subsection Wall

Extends @ref{Block}

@multitable {aaaaaaaa} {aaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item variants
@tab int
@tab 0
@end multitable

Defaults:

@multitable {aaaaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item solid
@tab true
@item destructible
@tab true
@item group
@tab "walls"
@item buildCostMultiplier
@tab 5
@end multitable

@node DeflectorWall
@subsection DeflectorWall

Extends @ref{Wall} -- Wall that deflects low damage bullets.

@multitable {aaaaaaaaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item hitTime
@tab float
@tab 10
@item maxDamageDeflect
@tab float
@tab 10
@end multitable

@node SurgeWall
@subsection SurgeWall

Extends @ref{Wall} -- Wall that creates lightning when shot.

@multitable {aaaaaaaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item lightningChance
@tab float
@tab 0.05
@item lightningDamage
@tab float
@tab 15
@item lightningLength
@tab int
@tab 17
@end multitable

@node Door
@subsection Door

Extends @ref{Wall}

@multitable {aaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaaaa}
@headitem field
@tab type
@tab default
@item openfx
@tab @ref{Effect}
@tab dooropen
@item closefx
@tab @ref{Effect}
@tab doorclose
@end multitable

Defaults:

@multitable {aaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item solid
@tab false
@item solidfies
@tab true
@item consumesTap
@tab true
@end multitable

@node MendProjector
@subsection MendProjector

Extends @ref{Block}

@multitable {aaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaa} {aaaaaaaa}
@headitem field
@tab type
@tab default
@item color
@tab @ref{Color}
@tab "84f491"
@item phase
@tab @ref{Color}
@tab "ffd59e"
@item reload
@tab float
@tab 250
@item range
@tab float
@tab 60
@item healPercent
@tab float
@tab 12
@item phaseBoost
@tab float
@tab 12
@item phaseRangeBoost
@tab float
@tab 50
@item useTime
@tab float
@tab 400
@end multitable

@node OverdriveProjector
@subsection OverdriveProjector

Extends @ref{Block}

@multitable {aaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item color
@tab @ref{Color}
@tab feb380
@item phase
@tab @ref{Color}
@tab ffd59e
@item reload
@tab float
@tab 60
@item range
@tab float
@tab 80
@item speedBoost
@tab float
@tab 1.5
@item speedBoostPhase
@tab float
@tab 0.75
@item useTime
@tab float
@tab 400
@item phaseRangeBoost
@tab float
@tab 20
@end multitable

@node ForceProjector
@subsection ForceProjector

Extends @ref{Block}

@multitable {aaaaaaaaaaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item phaseUseTime
@tab float
@tab 350
@item phaseRadiusBoost
@tab float
@tab 80
@item radius
@tab float
@tab 101.7
@item breakage
@tab float
@tab 550
@item cooldownNormal
@tab float
@tab 1.75
@item cooldownLiquid
@tab float
@tab 1.5
@item cooldownBrokenBase
@tab float
@tab 0.35
@item basePowerDraw
@tab float
@tab 0.2
@item powerDamage
@tab float
@tab 0.1
@end multitable

@node ShockMine
@subsection ShockMine

Extends @ref{Block}

@multitable {aaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item cooldown
@tab float
@tab 80
@item tileDamage
@tab float
@tab 5
@item damage
@tab float
@tab 13
@item length
@tab int
@tab 10
@item tendrils
@tab int
@tab 6
@end multitable

Defaults:
@multitable {aaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item update
@tab false
@item destructible
@tab true
@item solid
@tab false
@item targetable
@tab false
@item layer
@tab overlay
@end multitable

@node Turrets
@section Turrets

@menu
* Turret::
* CooledTurret::
* ItemTurret::
* DoubleTurret::
* ArtilleryTurret::
* BurstTurret::
* PowerTurret::
* ChargeTurret::
* LaserTurret::
* LiquidTurret::
@end menu

@node Turret
@subsection Turret

Extends @ref{Block} -- Base extended to make turrets types.

@multitable {aaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaa} {aaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item heatColor
@tab @ref{Color}
@tab turretHeat
@tab 
@item shootEffect
@tab @ref{Effect}
@tab none
@tab 
@item smokeEffect
@tab @ref{Effect}
@tab none
@tab 
@item ammoUseEffect
@tab @ref{Effect}
@tab none
@tab 
@item shootSound
@tab @ref{Sound}
@tab shoot
@tab 
@item ammoPerShot
@tab int
@tab 1
@tab 
@item ammoEjectBack
@tab float
@tab 1
@tab 
@item range
@tab float
@tab 50
@tab 
@item reload
@tab float
@tab 10
@tab 
@item inaccuracy
@tab float
@tab 0
@tab 
@item shots
@tab int
@tab 1
@tab 
@item spread
@tab float
@tab 4
@tab 
@item recoil
@tab float
@tab 1
@tab 
@item restitution
@tab float
@tab 0.02
@tab 
@item cooldown
@tab float
@tab 0.02
@tab 
@item rotatespeed
@tab float
@tab 5
@tab in degrees per tick
@item shootCone
@tab float
@tab 8
@tab 
@item shootShake
@tab float
@tab 0
@tab 
@item xRand
@tab float
@tab 0
@tab 
@item targetAir
@tab boolean
@tab true
@tab 
@item targetGround
@tab boolean
@tab true
@tab 
@end multitable

Defaults:
@multitable {aaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item priority
@tab turret
@item update
@tab true
@item solid
@tab true
@item layer
@tab turret
@item group
@tab turrets
@item outlineIcon
@tab true
@end multitable

@node CooledTurret
@subsection CooledTurret

Extends @ref{Turret} -- Extends turret with cooling behavior.

@multitable {aaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item coolantMultiplier
@tab float
@tab 5
@tab How much reload is lowered by for each unit of liquid of heat capacity.
@item coolEffect
@tab @ref{Effect}
@tab shoot
@tab 
@end multitable

@node ItemTurret
@subsection ItemTurret

Extends @ref{CooledTurret} -- Turrets that uses items as ammo.

@multitable {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item maxAmmo
@tab int
@tab 30
@item ammo
@tab @{ @ref{Item}: @ref{BulletType} @}
@tab 
@end multitable

Defaults:

@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasItems
@tab true
@end multitable

Ammo is an object of item:bullet-type pairs, for example:

@example
@{
    "ammo": @{
        "copper": "standardCopper",
        "metaglass": @{
            "type": "MissileBulletType",
            "damage": 2
        @}
    @}
@}
@end example

@node DoubleTurret
@subsection DoubleTurret

Extends @ref{ItemTurret} -- Turret that shoots from two side by side barrels.

@multitable {aaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item shotWidth
@tab float
@tab 2
@end multitable

Default:
@multitable {aaaaa} {aaaaaaa}
@headitem field
@tab default
@item shots
@tab 2
@end multitable

@node ArtilleryTurret
@subsection ArtilleryTurret

Extends @ref{ItemTurret} -- Artillery turrets have special shooting calculations done to hit targets.

@multitable {aaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item targetAir
@tab false
@end multitable

@node BurstTurret
@subsection BurstTurret

Extends @ref{ItemTurret} -- Turrets capable of bursts of specially spaced bullets, separated by long reload times.

@multitable {aaaaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item burstSpacing
@tab float
@tab 5
@end multitable

@node PowerTurret
@subsection PowerTurret

Extends @ref{CooledTurret} -- Turret which uses power has ammo to shoot.

@multitable {aaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item shootType
@tab @ref{BulletType}
@tab 
@item powerUse
@tab float
@tab 1
@end multitable

Defaults:

@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasPower
@tab true
@end multitable

@node ChargeTurret
@subsection @strong{TODO} ChargeTurret

@node LaserTurret
@subsection LaserTurret

Extends @ref{PowerTurret} 

@multitable {aaaaaaaaaaaaaaa} {aaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item firingMoveFract
@tab float
@tab 0.25
@tab rotatespeed fraction when turret is shooting
@item shootDuration
@tab float
@tab 100
@tab 
@end multitable

Defaults:
@multitable {aaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item canOverdrive
@tab false
@item coolantMultiplier
@tab 1
@end multitable

Doesn't update shoot if:
@itemize
@item
liquid temperature greater or equal to @samp{0.5}
@item
liquid flammability greater then @samp{0.1}
@end itemize

@node LiquidTurret
@subsection @strong{TODO} LiquidTurret

@node Distribution
@section Distribution

@menu
* Conveyor::
* ArmoredConveyor::
* Junction::
* ItemBridge::
* ExtendingItemBridge::
* BufferedItemBridge::
* Sorter::
* OverflowGate::
* MassDriver::
@end menu

@node Conveyor
@subsection @strong{TODO} Conveyor

@node ArmoredConveyor
@subsection @strong{TODO} ArmoredConveyor

@node Junction
@subsection Junction

Extends @ref{Block}

@multitable {aaaaaaaa} {aaaaaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item speed
@tab float
@tab 26
@tab frames taken to go through this junction
@item capacity
@tab capacity
@tab 6
@tab 
@end multitable

Defaults:
@multitable {aaaaaaaaaaaaaaa} {aaaaaaaaaaaaaa}
@headitem field
@tab default
@item update
@tab true
@item solid
@tab true
@item instantTransfer
@tab true
@item group
@tab transportation
@item unloadable
@tab false
@end multitable

@node ItemBridge
@subsection ItemBridge

Extends @ref{Block}

@multitable {aaaaaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item range
@tab int
@tab 
@item transportTime
@tab float
@tab 2
@end multitable

Defaults:
@multitable {aaaaaaaaaaaa} {aaaaaaaaaaaaaa}
@headitem field
@tab default
@item update
@tab true
@item solid
@tab true
@item hasPower
@tab true
@item layer
@tab power
@item expanded
@tab true
@item itemCapacity
@tab 10
@item posConfig
@tab true
@item configurable
@tab true
@item hasItems
@tab true
@item unloadable
@tab false
@item group
@tab transportation
@end multitable

Sprites:
@itemize
@item
@samp{<name>-end} example: @uref{https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/distribution/bridge-conveyor-end.png, bridge-conveyor-end}
@item
@samp{<name>-bridge} example: @uref{https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/distribution/bridge-conveyor-bridge.png, bridge-conveyor-bridge}
@item
@samp{<name>-arrow} example: @uref{https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/distribution/bridge-conveyor-arrow.png, bridge-conveyor-arrow}
@end itemize

@node ExtendingItemBridge
@subsection ExtendingItemBridge

Extends @ref{ItemBridge}

Defaults:
@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasItems
@tab true
@end multitable

@node BufferedItemBridge
@subsection BufferedItemBridge

Extends @ref{ExtendingItemBridge}

@multitable {aaaaaaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item speed
@tab float
@tab 40
@item bufferCapacity
@tab int
@tab 50
@end multitable

Defaults:
@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasItems
@tab true
@item hasPower
@tab false
@end multitable

@node Sorter
@subsection Sorter

Extends @ref{Block}

@multitable {aaaaaa} {aaaaaaa}
@headitem field
@tab type
@item invert
@tab boolean
@end multitable

Defaults:

@multitable {aaaaaaaaaaaaaaa} {aaaaaaaaaaaaaa}
@headitem field
@tab default
@item update
@tab true
@item solid
@tab true
@item instantTransfer
@tab true
@item group
@tab transportation
@item configurable
@tab true
@item unloadable
@tab false
@end multitable

@node OverflowGate
@subsection @strong{TODO} OverflowGate

@node MassDriver
@subsection MassDriver

Extends @ref{Block} -- Uses @samp{driverBolt} to transfer items. 

@multitable {aaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@item range
@tab float
@tab 
@item rotateSpeed
@tab float
@tab 0.04
@item translation
@tab float
@tab 7
@item minDistribute
@tab int
@tab 10
@item knockback
@tab float
@tab 4
@item reloadTime
@tab float
@tab 100
@item shootEffect
@tab @ref{Effect}
@tab shootBig2
@item smokeEffect
@tab @ref{Effect}
@tab shootBigSmoke2
@item recieveEffect
@tab @ref{Effect}
@tab mineBig
@item shake
@tab float
@tab 3
@end multitable

Notes:
@itemize
@item
range is limited by @samp{driverBolt}'s max range.
@end itemize

Defaults:
@multitable {aaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item update
@tab true
@item solid
@tab true
@item posConfig
@tab true
@item configurable
@tab true
@item hasItems
@tab true
@item layer
@tab turret
@item hasPower
@tab true
@item outlineIcon
@tab true
@end multitable

Sprites:
@itemize
@item
@samp{<name>-base}
@end itemize

@node Liquid 1
@section Liquid

@menu
* LiquidBlock::
* Pump::
* Conduit::
* LiquidRouter::
* LiquidTank::
* LiquidJunction::
* LiquidBridge::
* LiquidExtendingBridge::
@end menu

@node LiquidBlock
@subsection LiquidBlock

Extends @ref{Block} -- For blocks that can carry liquids. Apart from the better defaults, it also fetches extra sprites.

Defaults:

@multitable {aaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item update
@tab true
@item solid
@tab true
@item hasLiquids
@tab true
@item group
@tab liquids
@item outputsLiquid
@tab true
@end multitable

Sprites:
@itemize
@item
@code{<name>-liquid}
@item
@code{<name>-top}
@item
@code{<name>-bottom}
@end itemize

@node Pump
@subsection Pump

Extends @ref{LiquidBlock}

@multitable {aaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item pumpAmount
@tab float
@tab 1
@end multitable

@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item layer
@tab overlay
@item group
@tab liquids
@item floating
@tab true
@end multitable

@node Conduit
@subsection Conduit

Extends @ref{LiquidBlock}

Defaults:

@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item rotate
@tab true
@item solid
@tab false
@item floating
@tab true
@end multitable

Sprite lookup name @emph{(where @code{i} can be anything from 0-6)}:
@itemize
@item
@code{<name>-top-<i>}
@end itemize

@node LiquidRouter
@subsection LiquidRouter

Extends @ref{LiquidBlock}

@node LiquidTank
@subsection LiquidTank

Extends @ref{LiquidRouter}

@node LiquidJunction
@subsection LiquidJunction

Extends @ref{LiquidBlock}

@multitable {aaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasLiquids
@tab true
@end multitable

@node LiquidBridge
@subsection LiquidBridge

Extends @ref{LiquidBridge}

@multitable {aaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasItems
@tab false
@item hasLiquids
@tab true
@item outputsLiquid
@tab true
@item group
@tab liquids
@end multitable

@node LiquidExtendingBridge
@subsection LiquidExtendingBridge

Extends @ref{ExtendingItemBridge}

@multitable {aaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasItems
@tab false
@item hasLiquids
@tab true
@item outputsLiquid
@tab true
@item group
@tab liquids
@end multitable

@node Power
@section Power

@menu
* PowerBlock::
* PowerNode::
* PowerDistributor::
* Battery::
* PowerGenerator::
* ThermalGenerator::
* ItemLiquidGenerator::
* SingleTypeGenerator::
* BurnerGenerator::
* DecayGenerator::
* SolarGenerator::
* NuclearReactor::
* ImpactReactor::
@end menu

@node PowerBlock
@subsection PowerBlock

Extends @ref{Block} -- Just a simple overwrite of the defaults.

Defaults:

@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item update
@tab true
@item solid
@tab true
@item hasPower
@tab true
@item group
@tab power
@end multitable

@node PowerNode
@subsection PowerNode

Extends @ref{PowerBlock}

@multitable {aaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item laserRange
@tab float
@tab 6
@item maxNodes
@tab int
@tab 3
@end multitable

Defaults:

@multitable {aaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item expanded
@tab true
@item layer
@tab power
@item configurable
@tab true
@item consumesPower
@tab false
@item outputsPower
@tab false
@end multitable

@node PowerDistributor
@subsection PowerDistributor

Extends @ref{PowerBlock} -- Just a change of defaults for power distributors.

Defaults:
@multitable {aaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item consumesPower
@tab false
@item outputsPower
@tab true
@end multitable

@node Battery
@subsection Battery

Extends @ref{PowerDistributor} -- Just a change of defaults for batteries.

Defauts:

@multitable {aaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item outputsPower
@tab true
@item consumesPower
@tab true
@end multitable

@node PowerGenerator
@subsection PowerGenerator

Extends @ref{PowerDistributor} -- Base of power generators.

@multitable {aaaaaaaaaaaaaaa} {aaaaaaaaa} {aaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item powerProduction
@tab float
@tab 
@tab power produced per tick at 100% (@samp{1.0}) efficiency
@item generationType
@tab BlockStat
@tab basePowerGeneration
@tab 
@end multitable

Notes:
@itemize
@item
@samp{1 powerProduction = 60 pu/s}
@end itemize

Defaults:
@multitable {aaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item baseExplosiveness
@tab 5
@end multitable

@node ThermalGenerator
@subsection ThermalGenerator

Extends @ref{PowerGenerator} -- Generates power with the heat @ref{Attributes, , attribute} of a tile. Power production is @samp{powerProduction * heat}, and @samp{heat} must be greater then @samp{0.01}.

@multitable {aaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaa} {aaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item generateEffect
@tab @ref{Effect}
@tab none
@tab 
@end multitable

@node ItemLiquidGenerator
@subsection ItemLiquidGenerator

Extends @ref{PowerGenerator} -- Base power generation block which can use items, liquids or both as input sources for power production. Liquids will take priority over items.

@multitable {aaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item minItemEfficiency
@tab float
@tab 0.2
@tab 
@item itemDuration
@tab float
@tab 70
@tab number of ticks during which a single item will produce power.
@item minLiquidEfficiency
@tab float
@tab 0.2
@tab 
@item maxLiquidGenerate
@tab float
@tab 0.4
@tab Maximum liquid used per frame.
@item generateEffect
@tab @ref{Effect}
@tab generatespark
@tab 
@item explodeEffect
@tab @ref{Effect}
@tab generatespark
@tab 
@item heatColor
@tab @ref{Color}
@tab ff9b59
@tab 
@item randomlyExplode
@tab boolean
@tab true
@tab 
@item defaults
@tab boolean
@tab false
@tab 
@end multitable

Notes:
@itemize
@item
item efficiency is always 0.0
@item
liquid efficiency is always 0.0
@end itemize

Extra sprites:
@itemize
@item
@samp{<name>-top} if @samp{hasItems} is @samp{true}
@item
@samp{<name>-liquid}
@end itemize

@node SingleTypeGenerator
@subsection SingleTypeGenerator

Extends @ref{ItemLiquidGenerator} -- Generates power from an item.

@node BurnerGenerator
@subsection BurnerGenerator

Extends @ref{ItemLiquidGenerator} -- Generates power from item flamability.

@node DecayGenerator
@subsection DecayGenerator

Extends @ref{ItemLiquidGenerator} -- Generates power from item radioactivity.

Defaults:
@multitable {aaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasItems
@tab true
@item hasLiquids
@tab false
@end multitable

@node SolarGenerator
@subsection SolarGenerator

Extends @ref{PowerGenerator} -- A generator that always produces 100% efficiency power.

Notes:
@itemize
@item
Lower targetting priority then other generators.
@end itemize

@node NuclearReactor
@subsection NuclearReactor

Extends @ref{PowerGenerator} -- Generates power relative to how many items are in storage, and explodes if it runs out of coolant. 

@multitable {aaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaa} {aaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item coolColor
@tab @ref{Color}
@tab ffffff00
@tab 
@item hotColor
@tab @ref{Color}
@tab ff9575a3
@tab 
@item itemDuration
@tab float
@tab 120
@tab time to consume 1 fuel
@item heating
@tab float
@tab 0.01
@tab heating per frame * fullness
@item smokeThreshold
@tab float
@tab 0.3
@tab heat at which blocks start smoking
@item explosionRadius
@tab int
@tab 40
@tab 
@item explosionDamage
@tab int
@tab 1350
@tab 
@item flashThreshold
@tab float
@tab 0.46
@tab heat at which lights start flashing
@item coolantPower
@tab float
@tab 0.5
@tab 
@end multitable

Defaults:

@multitable {aaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item itemCapacity
@tab 30
@item liquidCapacity
@tab 30
@item hasItems
@tab true
@item hasLiquids
@tab true
@end multitable

Extra Sprites:
@itemize
@item
@samp{<name>-center} top region
@item
@samp{<name>-lights} lights region
@end itemize

@node ImpactReactor
@subsection ImpactReactor

Extends @ref{PowerGenerator} -- Generator that uses power and has a startup time.

@multitable {aaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item plasmas
@tab int
@tab 4
@tab number of plasma sprites
@item warmupSpeed
@tab float
@tab 0.001
@tab 
@item itemDuration
@tab float
@tab 60
@tab 
@item explosionRadius
@tab int
@tab 50
@tab 
@item explosionDamage
@tab int
@tab 2000
@tab 
@item plasma1
@tab @ref{Color}
@tab ffd06b
@tab 
@item plasma2
@tab @ref{Color}
@tab ff361b
@tab 
@end multitable

Defaults:
@multitable {aaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasPower
@tab true
@item hasLiquids
@tab true
@item liquidCapacity
@tab 30f
@item hasItems
@tab true
@item outputsPower
@tab true
@item consumesPower
@tab true
@end multitable

Sprites:
@itemize
@item
@samp{<name>-bottom} bottom region
@item
@samp{<name>-plasma-<i>} plasma regions, where `i` is `0` to `plasmas - 1`.
@end itemize

@node Production
@section Production

@menu
* Drill::
* SolidPump::
* Cultivator::
* Fracker::
@end menu

@node Drill
@subsection Drill

Extends @ref{Block} -- Types that can be placed on ore blocks to extract the ore blocks items.

@multitable {aaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item tier
@tab int
@tab 
@tab Maximum tier of blocks this drill can mine.
@item drillTime
@tab float
@tab 300
@tab Base time to drill one ore, in frames.
@item liquidBoostIntensity
@tab float
@tab 1.6
@tab How many times faster the drill will progress when boosted by liquid.
@item warmupSpeed
@tab float
@tab 0.02
@tab Speed at which the drill speeds up.
@item drawMineItem
@tab boolean
@tab false
@tab Whether to draw the item this drill is mining.
@item drillEffect
@tab @ref{Effect}
@tab mine
@tab Effect played when an item is produced. This is colored.
@item rotateSpeed
@tab float
@tab 2
@tab Speed the drill bit rotates at.
@item updateEffect
@tab @ref{Effect}
@tab pulverizeSmall
@tab Effect randomly played while drilling.
@item updateEffectChance
@tab float
@tab 0.02
@tab Chance the update effect will appear.
@item drawRim
@tab boolean
@tab false
@tab 
@item heatColor
@tab @ref{Color}
@tab ff5512
@tab 
@end multitable

Defaults:
@multitable {aaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item update
@tab true
@item solid
@tab true
@item layer
@tab overlay
@item group
@tab drills
@item hasLiquids
@tab true
@item liquidCapacity
@tab 5
@item hasItems
@tab true
@item idleSound
@tab drill
@item idleSoundVolume
@tab 0.003
@end multitable

Sprites:
@itemize
@item
@samp{<name>-rim}
@item
@samp{<name>-rotator}
@item
@samp{<name>-top}
@end itemize

@node SolidPump
@subsection SolidPump

Extends @ref{Pump} -- Pump that makes liquid from solids and takes in power. Only works on solid floor blocks.

@multitable {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item result
@tab @ref{Liquid}
@tab water
@item updateEffect
@tab @ref{Effect}
@tab none
@item updateEffectChance
@tab float
@tab 0.02
@item rotateSpeed
@tab float
@tab 1
@item attribute
@tab @ref{Attribute}
@tab 
@end multitable

Defaults:
@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasPower
@tab true
@end multitable

Sprites:
@itemize
@item
@samp{<name>-liquid}
@end itemize

@node Cultivator
@subsection Cultivator

Extends @ref{GenericCrafter}

@multitable {aaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item recurrence
@tab float
@tab 6
@end multitable

Defaults:
@multitable {aaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item craftEffect
@tab none
@end multitable

Sprites:
@itemize
@item
@samp{<name>-middle}
@item
@samp{<name>-top}
@end itemize

@node Fracker
@subsection Fracker

Extends @ref{SolidPump}

@multitable {aaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item itemUseTime
@tab 100
@end multitable

Defaults:
@multitable {aaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item hasItems
@tab true
@end multitable

Sprites:
@itemize
@item
@samp{<name>-liquid}
@item
@samp{<name>-rotater}
@item
@samp{<name>-top}
@end itemize

@node Storage
@section Storage

@menu
* CoreBlock::
* Vault::
* Unloader::
* LaunchPad::
@end menu

@node CoreBlock
@subsection @strong{TODO} CoreBlock

@node Vault
@subsection @strong{TODO} Vault

@node Unloader
@subsection @strong{TODO} Unloader

@node LaunchPad
@subsection @strong{TODO} LaunchPad

@node Units
@section Units

@menu
* RepairPoint::
* UnitFactory::
* CommandCenter::
* UnitFactory: UnitFactory 1. 
* MechPad::
@end menu

@node RepairPoint
@subsection RepairPoint

Extends @ref{Block} -- Block which can repair units within range, with a laser.

@multitable {aaaaaaaaaaaa} {aaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item repairRadius
@tab float
@tab 50
@item repairSpeed
@tab float
@tab 0.3
@item powerUse
@tab float
@tab 
@end multitable

Defaults:
@multitable {aaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item update
@tab true
@item solid
@tab true
@item hasPower
@tab true
@item outlineIcon
@tab true
@item layer
@tab turret
@item layer2
@tab power
@end multitable

Extra sprites:
@itemize
@item
@samp{<name>-base}
@end itemize

@node UnitFactory
@subsection @strong{TODO} UnitFactory

@node CommandCenter
@subsection @strong{TODO} CommandCenter

@node UnitFactory 1
@subsection @strong{TODO} UnitFactory

@node MechPad
@subsection @strong{TODO} MechPad

@node BulletTypes
@chapter BulletTypes

@menu
* BulletType::
* BasicBulletType::
* ArtilleryBulletType::
* BombBulletType::
* FlakBulletType::
* HealBulletType::
* LiquidBulletType::
* MassDriverBolt::
* MissileBulletType::
@end menu

@node BulletType
@section BulletType

Extends @ref{Content} -- Bullet can either be an object or a string, where a string would be reusing a built-in one and an object would be making a custom one.

@multitable {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item lifetime
@tab float
@tab 
@tab amount of ticks it lasts
@item speed
@tab float
@tab 
@tab inital speed of bullet
@item damage
@tab float
@tab 
@tab collision damage
@item hitSize
@tab float
@tab 4
@tab collision radius
@item drawSize
@tab float
@tab 40
@tab 
@item drag
@tab float
@tab 0
@tab decelleration per tick
@item pierce
@tab boolean
@tab 
@tab whether it can collide
@item hitEffect
@tab @ref{Effect}
@tab 
@tab created when bullet hits something
@item despawnEffect
@tab @ref{Effect}
@tab 
@tab created when bullet despawns
@item shootEffect
@tab @ref{Effect}
@tab 
@tab created when shooting
@item smokeEffect
@tab @ref{Effect}
@tab 
@tab created when shooting
@item hitSound
@tab Sound
@tab 
@tab made when hitting something or getting removed
@item inaccuracy
@tab float
@tab 0
@tab extra inaccuracy
@item ammoMultiplier
@tab float
@tab 2
@tab how many bullets get created per item/liquid
@item reloadMultiplier
@tab float
@tab 1
@tab multiplied by turret reload speed
@item recoil
@tab float
@tab 
@tab recoil from shooter entities
@item splashDamage
@tab float
@tab 0
@tab 
@item knockback
@tab float
@tab 
@tab Knockback in velocity.
@item hitTiles
@tab boolean
@tab true
@tab Whether this bullet hits tiles.
@item status
@tab @ref{StatusEffect}
@tab none
@tab Status effect applied on hit.
@item statusDuration
@tab float
@tab 600
@tab Intensity of applied status effect in terms of duration.
@item collidesTiles
@tab boolean
@tab true
@tab Whether this bullet type collides with tiles.
@item collidesTeam
@tab boolean
@tab false
@tab Whether this bullet type collides with tiles that are of the same team.
@item collidesAir
@tab boolean
@tab true
@tab Whether this bullet type collides with air units.
@item collides
@tab boolean
@tab true
@tab Whether this bullet types collides with anything at all.
@item keepVelocity
@tab boolean
@tab true
@tab Whether velocity is inherited from the shooter.
@item fragBullets
@tab int
@tab 9
@tab 
@item fragVelocityMin
@tab float
@tab 0.2
@tab 
@item fragVelocityMax
@tab float
@tab 1
@tab 
@item fragBullet
@tab @ref{BulletType}
@tab null
@tab 
@item splashDamageRadius
@tab float
@tab -1
@tab Use a negative value to disable splash damage.
@item incendAmount
@tab int
@tab 0
@tab 
@item incendSpread
@tab float
@tab 8
@tab 
@item incendChance
@tab float
@tab 1
@tab 
@item homingPower
@tab float
@tab 0
@tab 
@item homingRange
@tab float
@tab 50
@tab 
@item lightining
@tab int
@tab 
@tab 
@item lightningLength
@tab int
@tab 5
@tab 
@item hitShake
@tab float
@tab 0
@tab 
@end multitable

Built-in bullets:
@itemize
@item
artillery:
@itemize
@item
@samp{artilleryDense} @samp{arilleryPlastic} @samp{artilleryPlasticFrag} @samp{artilleryHoming} @samp{artlleryIncendiary} @samp{artilleryExplosive} @samp{artilleryUnit}
@end itemize
@item
flak:
@itemize
@item
@samp{flakScrap} @samp{flakLead} @samp{flakPlastic} @samp{flakExplosive} @samp{flakSurge} @samp{flakGlass} @samp{glassFrag}
@end itemize
@item
missiles:
@itemize
@item
@samp{missileExplosive} @samp{missileIncendiary} @samp{missileSurge} @samp{missileJavelin} @samp{missileSwarm} @samp{missileRevenant}
@end itemize
@item
standard:
@itemize
@item
@samp{standardCopper} @samp{standardDense} @samp{standardThorium} @samp{standardHoming} @samp{standardIncendiary} @samp{standardMechSmall} @samp{standardGlaive} @samp{standardDenseBig} @samp{standardThoriumBig} @samp{standardIncendiaryBig}
@end itemize
@item
electric:
@itemize
@item
@samp{lancerLaser} @samp{meltdownLaser} @samp{lightning} @samp{arc} @samp{damageLightning}
@end itemize
@item
liquid:
@itemize
@item
@samp{waterShot} @samp{cryoShot} @samp{slagShot} @samp{oilShot}
@end itemize
@item
environment & misc:
@itemize
@item
@samp{fireball} @samp{basicFlame} @samp{pyraFlame} @samp{driverBolt} @samp{healBullet} @samp{healBulletBig} @samp{frag} @samp{eruptorShot}
@end itemize
@item
bombs:
@itemize
@item
@samp{bombExplosive} @samp{bombIncendiary} @samp{bombOil}
@end itemize
@end itemize

@node BasicBulletType
@section BasicBulletType

The actual bullet type.

@multitable {aaaaaaaaaaaa} {aaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@item backColor
@tab @ref{Color}
@tab bulletYellowBack
@item frontColor
@tab @ref{Color}
@tab bulletYellow
@item bulletWidth
@tab float
@tab 5
@item bulletHeight
@tab float
@tab 7
@item bulletShrink
@tab float
@tab 0.5
@item bulletSprite
@tab String
@tab 
@end multitable

@node ArtilleryBulletType
@section ArtilleryBulletType

@multitable {aaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@item trailEffect
@tab @ref{Effect}
@tab artilleryTrail
@end multitable


Defaults:

@multitable {aaaaaaaaaaaaa} {aaaaaaaaa}
@headitem field
@tab type
@item collidesTiles
@tab false
@item collides
@tab false
@item hitShake
@tab 1
@item hitSound
@tab explosion
@end multitable

@node BombBulletType
@section BombBulletType

Defaults:

@multitable {aaaaaaaaaaaaa} {aaaaaaaaa}
@headitem field
@tab type
@item collidesTiles
@tab false
@item collides
@tab false
@item bulletShrink
@tab 0.7
@item lifetime
@tab 30
@item drag
@tab 0.05
@item keepVelocity
@tab false
@item collidesAir
@tab false
@item hitSound
@tab explosion
@end multitable

@node FlakBulletType
@section FlakBulletType

Bullets that explode near enemies.

@multitable {aaaaaaaaaaaa} {aaaaa} {aaaaaaa} {aaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item explodeRange
@tab float
@tab 30
@tab 
@end multitable

Defaults:

@multitable {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaa}
@headitem field
@tab type
@item splashDamage
@tab 15
@item splashDamageRadius
@tab 34
@item hitEffect
@tab flakExplosionBig
@item bulletWidth
@tab 8
@item bulletHeight
@tab 10
@end multitable

@node HealBulletType
@section HealBulletType

Bullets that can heal blocks of the same team as the shooter.

@multitable {aaaaaaaaaaa} {aaaaa} {aaaaaaa} {aaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item healPercent
@tab float
@tab 3
@tab 
@end multitable

Defaults:

@multitable {aaaaaaaaaaaaa} {aaaaaaaaa}
@headitem field
@tab type
@item shootEffect
@tab shootHeal
@item smokeEffect
@tab hitLaser
@item hitEffect
@tab hitLaser
@item despawnEffect
@tab hitLaser
@item collidesTeam
@tab true
@end multitable

@node LiquidBulletType
@section LiquidBulletType

@multitable {aaaaaa} {aaaaaa} {aaaaaaa} {aaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab 
@item liquid
@tab Liquid
@tab null
@tab required field
@end multitable

Defaults:

@multitable {aaaaaaaaaaaaaa} {aaaaaaaaa}
@headitem field
@tab type
@item lifetime
@tab 74
@item statusDuration
@tab 90
@item despawnEffect
@tab none
@item hitEffect
@tab hitLiquid
@item smokeEffect
@tab none
@item shootEffect
@tab none
@item drag
@tab 0.009
@item knockback
@tab 0.55
@end multitable

@node MassDriverBolt
@section MassDriverBolt

Defaults:

@multitable {aaaaaaaaaaaaa} {aaaaaaaaaaaa}
@headitem field
@tab type
@item collidesTiles
@tab false
@item lifetime
@tab 200
@item despawnEffect
@tab smeltsmoke
@item hitEffect
@tab hitBulletBig
@item drag
@tab 0.005
@end multitable

@node MissileBulletType
@section MissileBulletType

@multitable {aaaaaaaaaa} {aaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@item trailColor
@tab @ref{Color}
@tab missileYellowBack
@item weaveScale
@tab float
@tab 0
@item weaveMag
@tab float
@tab -1
@end multitable

@node UnitTypes
@chapter UnitTypes

@menu
* UnitType::
* BaseUnit::
@end menu

@node UnitType
@section UnitType

Extends @ref{UnlockableContent and MappableContent, , UnlockableContent} -- Unit types go in their own special directory: `units/`

@multitable {aaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item type
@tab @ref{BaseUnit}
@tab 
@item health
@tab float
@tab 60
@item hitsize
@tab float
@tab 7
@item hitsizeTile
@tab float
@tab 4
@item speed
@tab float
@tab 0.4
@item range
@tab float
@tab 0
@item attackLength
@tab float
@tab 150
@item rotatespeed
@tab float
@tab 0.2
@item baseRotateSpeed
@tab float
@tab 0.1
@item shootCone
@tab float
@tab 15
@item mass
@tab float
@tab 1
@item flying
@tab boolean
@tab 
@item targetAir
@tab boolean
@tab true
@item rotateWeapon
@tab boolean
@tab false
@item drag
@tab float
@tab 0.1
@item maxVelocity
@tab float
@tab 5
@item retreatPercent
@tab float
@tab 0.6
@item itemCapacity
@tab int
@tab 30
@item buildPower
@tab float
@tab 0.3
@item minePower
@tab float
@tab 0.7
@item weapon
@tab @ref{Weapon}
@tab 
@item weaponOffsetY
@tab float
@tab 
@item engineOffset
@tab float
@tab 
@item engineSize
@tab float
@tab 
@end multitable

@node BaseUnit
@section BaseUnit

There are a few useful bases:
@itemize
@item
@samp{FlyingUnit}
@itemize
@item
@samp{Revenant}
@item
@samp{BaseDrone}
@itemize
@item
@samp{BuilderDrone}
@item
@samp{MinerDrone}
@item
@samp{RepairDrone}
@end itemize
@end itemize
@item
@samp{GroundUnit}
@end itemize

@node Mech
@chapter Mech

Extends @ref{UnlockableContent and MappableContent, , UnlockableContent} -- Mechs are the player controlled entities.

@multitable {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab type
@tab default
@item flying
@tab boolean
@tab 
@item speed
@tab float
@tab 1.1
@item maxSpeed
@tab float
@tab 10
@item boostSpeed
@tab float
@tab 0.75
@item drag
@tab float
@tab 0.4
@item mass
@tab float
@tab 1
@item shake
@tab float
@tab 0
@item health
@tab float
@tab 200
@item hitsize
@tab float
@tab 6
@item cellTrnsY
@tab float
@tab 0
@item mineSpeed
@tab float
@tab 1
@item drillPower
@tab int
@tab -1
@item buildPower
@tab float
@tab 1
@item engineColor
@tab @ref{Color}
@tab boostTo
@item itemCapacity
@tab int
@tab 30
@item turnCursor
@tab boolean
@tab true
@item canHeal
@tab boolean
@tab false
@item compoundSpeed
@tab float
@tab 5
@item compoundSpeedBoost
@tab float
@tab 5
@item weaponOffsetY
@tab float
@tab 5
@item engineOffset
@tab float
@tab 5
@item engineSize
@tab float
@tab 2.5
@item weapon
@tab @ref{Weapon}
@tab null
@end multitable

@node Weapon
@chapter Weapon

Weapons are used by units types, flying or ground, and mechs alike. They're what actually shoots the bullets.

@multitable {aaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab notes
@item name
@tab string
@tab 
@tab 
@item nimPlayerDist
@tab float
@tab 20
@tab minimum cursor distance from player, fixes 'cross-eyed' shooting.
@item sequenceNum
@tab int
@tab 0
@tab 
@item bullet
@tab @ref{BulletType}
@tab 
@tab bullet shot
@item ejectEffect
@tab @ref{Effect}
@tab none
@tab shell ejection effect
@item reload
@tab float
@tab 
@tab weapon reload in frames
@item shots
@tab int
@tab 1
@tab amount of shots per fire
@item spacing
@tab float
@tab 12
@tab spacing in degrees between multiple shots, if applicable
@item inaccuracy
@tab float
@tab 0
@tab inaccuracy of degrees of each shot
@item shake
@tab float
@tab 0
@tab intensity and duration of each shot's screen shake
@item recoil
@tab float
@tab 1.5
@tab visual weapon knockback.
@item length
@tab float
@tab 3
@tab shoot barrel y offset
@item width
@tab float
@tab 4
@tab shoot barrel x offset.
@item velocityRnd
@tab float
@tab 0
@tab fraction of velocity that is random
@item alternate
@tab bool
@tab false
@tab shoot one arm after another, rather than all at once
@item lengthRand
@tab float
@tab 0
@tab randomization of shot length
@item shotDelay
@tab float
@tab 0
@tab delay in ticks between shots
@item ignoreRotation
@tab boolean
@tab false
@tab whether shooter rotation is ignored when shooting.
@item shootSound
@tab @ref{Sound}
@tab pew
@tab 
@end multitable

@node Effect
@chapter Effect

Type should be a @code{string}. You can't currently create custom effects. List of built-in effects are as follows:

@itemize
@item
@samp{none} @samp{placeBlock} @samp{breakBlock} @samp{smoke} @samp{spawn} @samp{tapBlock} @samp{select}
@item
@samp{vtolHover} @samp{unitDrop} @samp{unitPickup} @samp{unitLand} @samp{pickup} @samp{healWave} @samp{heal}
@samp{landShock} @samp{reactorsmoke} @samp{nuclearsmoke} @samp{nuclearcloud}
@item
@samp{redgeneratespark} @samp{generatespark} @samp{fuelburn} @samp{plasticburn} @samp{pulverize}
@samp{pulverizeRed} @samp{pulverizeRedder} @samp{pulverizeSmall} @samp{pulverizeMedium}
@item
@samp{producesmoke} @samp{smeltsmoke} @samp{formsmoke} @samp{blastsmoke} @samp{lava} @samp{doorclose}
@samp{dooropen} @samp{dooropenlarge} @samp{doorcloselarge} @samp{purify} @samp{purifyoil} @samp{purifystone} @samp{generate}
@item
@samp{mine} @samp{mineBig} @samp{mineHuge} @samp{smelt} @samp{teleportActivate} @samp{teleport} @samp{teleportOut} @samp{ripple} @samp{bubble} @samp{launch}
@item
@samp{healBlock} @samp{healBlockFull} @samp{healWaveMend} @samp{overdriveWave} @samp{overdriveBlockFull} @samp{shieldBreak} @samp{hitBulletSmall} @samp{hitFuse}
@item
@samp{hitBulletBig} @samp{hitFlameSmall} @samp{hitLiquid} @samp{hitLaser} @samp{hitLancer} @samp{hitMeltdown} @samp{despawn} @samp{flakExplosion} @samp{blastExplosion}
@item
@samp{plasticExplosion} @samp{artilleryTrail} @samp{incendTrail} @samp{missileTrail} @samp{absorb} @samp{flakExplosionBig} @samp{plasticExplosionFlak} @samp{burning} @samp{fire}
@item
@samp{fireSmoke} @samp{steam} @samp{fireballsmoke} @samp{ballfire} @samp{freezing} @samp{melting} @samp{wet} @samp{oily} @samp{overdriven} @samp{dropItem} @samp{shockwave}
@item
@samp{bigShockwave} @samp{nuclearShockwave} @samp{explosion} @samp{blockExplosion}
@samp{blockExplosionSmoke} @samp{shootSmall} @samp{shootHeal} @samp{shootSmallSmoke} @samp{shootBig} @samp{shootBig2} @samp{shootBigSmoke}
@item
@samp{shootBigSmoke2} @samp{shootSmallFlame} @samp{shootPyraFlame} @samp{shootLiquid} @samp{shellEjectSmall} @samp{shellEjectMedium}
@item
@samp{shellEjectBig} @samp{lancerLaserShoot} @samp{lancerLaserShootSmoke} @samp{lancerLaserCharge}
@samp{lancerLaserChargeBegin} @samp{lightningCharge} @samp{lightningShoot}
@item
@samp{unitSpawn} @samp{spawnShockwave} @samp{magmasmoke} @samp{impactShockwave}
@samp{impactcloud} @samp{impactsmoke} @samp{dynamicExplosion} @samp{padlaunch} @samp{commandSend} @samp{coreLand}
@end itemize

@node StatusEffect
@chapter StatusEffect

@emph{Not be be confused with @ref{Effect}}, a status effect will give an entity special properties. It is currently @strong{not possible to add custom status effects}. -- Status effects are used as transitions between intermediate effects. If some a @samp{wet} unit gets @samp{shocked} it then gets 20 damage.

@multitable {aaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa} {aaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem field
@tab type
@tab default
@tab 
@item damageMultiplier
@tab float
@tab 1
@tab 
@item armorMultiplier
@tab float
@tab 1
@tab 
@item speedMultiplier
@tab float
@tab 1
@tab 
@item color
@tab @ref{Color}
@tab white
@tab 
@item damage
@tab float
@tab 
@tab Damage (or healing) per frame.
@item effect
@tab @ref{Effect}
@tab none
@tab Random effect (0.15% per frame), on affected units.
@end multitable

@itemize
@item
opposites: effect which reduces anothers lifetime.
@end itemize

Built-in status effects:

@itemize
@item
@samp{none} -- Does nothing.

@item
@samp{burning}
@multitable {aaaaaa} {aaaaaaa}
@headitem field
@tab default
@item damage
@tab 0.06
@item effect
@tab burning
@end multitable
@itemize
@item
opposites: @samp{wet} @samp{freezing}
@item
tarred: 1 damage and keeps burning
@end itemize

@item
@samp{freezing}
@multitable {aaaaaaaaaaaaaaa} {aaaaaaaa}
@headitem field
@tab default
@item speedMultiplier
@tab 0.6
@item armorMultiplier
@tab 0.8
@item effect
@tab freezing
@end multitable
@itemize
@item
opposites: @samp{melting} @samp{burning}
@end itemize

@item
@samp{wet}
@multitable {aaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item speedMultiplier
@tab 0.9
@item effect
@tab wet
@end multitable
@itemize
@item
opposites: @samp{burning}
@item
shocked: 20 damage
@end itemize

@item
@samp{melting}
@multitable {aaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item speedMultiplier
@tab 0.8
@item armorMultiplier
@tab 0.8
@item damage
@tab 0.3
@item effect
@tab melting
@end multitable
@itemize
@item
opposites: @samp{wet} @samp{freezing}
@item
tarred: keeps melting
@end itemize

@item
@samp{tarred}
@multitable {aaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item speedMultiplier
@tab 0.6
@item effect
@tab oily
@end multitable
@itemize
@item
burning: keeps burning
@item
melting: keeps burning
@end itemize

@item
@samp{overdrive}
@multitable {aaaaaaaaaaaaaaaa} {aaaaaaaaaa}
@headitem field
@tab default
@item armorMultiplier
@tab 0.95
@item speedMultiplier
@tab 1.15
@item damageMultiplier
@tab 1.4
@item damage
@tab -0.01
@item effect
@tab overdriven
@end multitable

@item
@samp{shielded}
@multitable {aaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item armorMultiplier
@tab 3
@end multitable

@item
@samp{boss}
@multitable {aaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem field
@tab default
@item armorMultiplier
@tab 3
@item damageMultiplier
@tab 3
@item speedMultiplier
@tab 1.1
@end multitable

@item
@samp{shocked} -- Does nothing.

@item
@samp{corroded}
@multitable {aaaaaa} {aaaaaaa}
@headitem field
@tab default
@item damage
@tab 0.1
@end multitable
@end itemize

@node Zone
@chapter @strong{TODO} Zone

@node Rules
@chapter @strong{TODO} Rules

@node Objective
@chapter @strong{TODO} Objective

@bye